package edu.uwm.cs.cool;
/* The following code was generated by JFlex 1.4.3 on 2/10/09 4:27 PM */

/* Cool.flex language lexer specification */

import beaver.Symbol;
import beaver.Scanner;

import static edu.uwm.cs.cool.CoolBeaverParser.Terminals.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/10/09 4:27 PM from the specification file
 * <tt>/Users/daniel/Development/Scala/cool/src/main/jflex/edu/uwm/cs/cool/CoolJFlexScanner.lex</tt>
 */
public class CoolJFlexScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\2\1\1\1\0\2\2\22\0\1\2\1\14\1\6\5\0"+
    "\1\23\1\24\1\11\1\12\1\20\1\13\1\17\1\10\1\63\11\7"+
    "\1\22\1\21\1\16\1\15\1\27\2\0\22\3\1\56\7\3\1\0"+
    "\1\62\2\0\1\4\1\0\1\31\1\54\1\30\1\35\1\33\1\36"+
    "\1\5\1\45\1\43\1\60\1\61\1\34\1\44\1\41\1\51\1\53"+
    "\1\42\1\52\1\32\1\40\1\50\1\46\1\47\1\37\1\55\1\57"+
    "\1\25\1\0\1\26\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\21\4"+
    "\1\26\1\27\1\30\1\31\2\32\1\2\1\0\1\33"+
    "\1\34\1\35\7\4\1\36\2\4\1\37\11\4\1\40"+
    "\13\4\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\0\11\4\1\53\2\4\1\54"+
    "\3\4\1\55\2\4\1\56\3\4\1\57\1\60\12\4"+
    "\1\61\5\4\1\62\1\4\1\63\5\4\1\64\1\65"+
    "\1\4\1\66\3\4\1\67\11\4\1\70\1\71\2\4"+
    "\1\72\1\4\1\73\1\74\1\4\1\75\1\76\3\4"+
    "\1\77\1\100\7\4\1\101\1\4\1\102\3\4\1\103"+
    "\1\4\1\104\1\4\1\105\1\106\5\4\1\107\1\110"+
    "\1\111\3\4\1\112\1\113\1\4\1\114\1\115\1\116"+
    "\1\117\1\4\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\234\0\u01a0\0\u01d4\0\234\0\234\0\234\0\234\0\u0208"+
    "\0\u023c\0\234\0\234\0\234\0\234\0\234\0\234\0\234"+
    "\0\234\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\234\0\234\0\u0618\0\u064c\0\u0138"+
    "\0\u0680\0\u06b4\0\234\0\234\0\234\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u016c\0\u0854\0\u0888\0\u016c"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u016c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\234\0\234\0\234"+
    "\0\234\0\234\0\234\0\234\0\234\0\234\0\234\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u016c\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u016c\0\u100c\0\u1040\0\u016c\0\u1074\0\u10a8\0\u10dc\0\u016c"+
    "\0\u016c\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u016c\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u016c\0\u141c\0\u016c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u016c\0\u016c\0\u1554\0\u016c\0\u1588\0\u15bc\0\u15f0"+
    "\0\u016c\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u016c\0\u016c\0\u17f8\0\u182c\0\u016c\0\u1860"+
    "\0\u016c\0\u1894\0\u18c8\0\u016c\0\u016c\0\u18fc\0\u1930\0\u1964"+
    "\0\u016c\0\u016c\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u016c\0\u1b04\0\u016c\0\u1b38\0\u1b6c\0\u1ba0\0\u016c"+
    "\0\u1bd4\0\u016c\0\u1c08\0\u016c\0\u016c\0\u1c3c\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u016c\0\u016c\0\u016c\0\u1d40\0\u1d74\0\u1da8"+
    "\0\u016c\0\u016c\0\u1ddc\0\u016c\0\u016c\0\u016c\0\u016c\0\u1e10"+
    "\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\3"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\10"+
    "\1\41\1\42\1\10\1\43\1\44\1\10\1\45\1\46"+
    "\1\10\1\47\1\50\1\51\1\10\1\52\1\6\3\10"+
    "\1\3\1\12\1\53\1\54\4\53\1\55\53\53\1\56"+
    "\1\53\1\3\3\0\1\3\22\0\1\3\32\0\1\3"+
    "\67\0\1\5\64\0\3\6\1\0\1\6\20\0\32\6"+
    "\1\0\1\6\1\3\2\0\1\57\1\60\1\57\1\0"+
    "\1\57\17\0\1\3\32\57\1\3\1\57\3\0\3\10"+
    "\1\0\1\10\20\0\32\10\1\0\1\10\7\0\1\12"+
    "\53\0\1\12\10\0\1\61\1\62\67\0\1\63\11\0"+
    "\1\64\51\0\1\65\51\0\3\10\1\0\1\10\20\0"+
    "\1\10\1\66\2\10\1\67\25\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\24\10\1\70\5\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\3\10\1\71"+
    "\14\10\1\72\11\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\4\10\1\73\2\10\1\74\2\10\1\75"+
    "\17\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\1\10\1\76\30\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\3\10\1\77\15\10\1\100\10\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\1\10\1\101"+
    "\11\10\1\102\5\10\1\103\10\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\15\10\1\104\4\10\1\105"+
    "\2\10\1\106\4\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\1\10\1\107\1\10\1\110\14\10\1\111"+
    "\11\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\6\10\1\112\5\10\1\113\15\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\1\10\1\114\30\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\1\10\1\115"+
    "\30\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\13\10\1\116\1\10\1\117\14\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\16\10\1\120\5\10\1\121"+
    "\5\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\3\10\1\122\26\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\1\10\1\123\20\10\1\124\7\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\13\10\1\125"+
    "\16\10\1\0\1\10\1\53\1\0\4\53\1\0\53\53"+
    "\1\0\1\53\1\126\1\127\4\126\1\130\27\126\1\131"+
    "\1\126\1\132\1\133\10\126\1\134\1\126\1\135\5\126"+
    "\1\136\1\137\3\0\3\57\1\0\1\57\20\0\32\57"+
    "\1\0\1\57\1\61\1\0\62\61\11\62\1\140\52\62"+
    "\3\0\3\10\1\0\1\10\20\0\2\10\1\141\5\10"+
    "\1\142\21\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\1\10\1\143\30\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\2\10\1\144\27\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\1\10\1\145\30\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\23\10"+
    "\1\146\6\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\2\10\1\147\27\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\10\10\1\150\21\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\27\10\1\151\2\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\6\10"+
    "\1\152\23\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\4\10\1\153\25\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\11\10\1\154\20\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\22\10\1\155\7\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\22\10"+
    "\1\156\7\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\1\10\1\157\16\10\1\160\4\10\1\161\4\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\23\10"+
    "\1\162\6\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\10\10\1\163\21\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\17\10\1\164\12\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\4\10\1\165\25\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\23\10"+
    "\1\166\6\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\10\10\1\167\21\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\4\10\1\170\15\10\1\171\7\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\10\10"+
    "\1\172\21\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\13\10\1\173\16\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\3\10\1\174\26\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\30\10\1\175\1\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\10\10"+
    "\1\176\1\10\1\177\17\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\1\200\31\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\13\10\1\201\5\10\1\202"+
    "\10\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\3\10\1\203\26\10\1\0\1\10\10\62\1\4\1\140"+
    "\52\62\3\0\3\10\1\0\1\10\20\0\3\10\1\204"+
    "\26\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\1\205\31\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\2\10\1\206\27\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\10\10\1\207\21\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\4\10\1\210\25\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\3\10"+
    "\1\211\26\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\3\10\1\212\26\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\3\10\1\213\26\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\25\10\1\214\4\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\2\10"+
    "\1\215\27\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\1\10\1\216\30\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\26\10\1\217\3\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\21\10\1\220\10\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\13\10"+
    "\1\221\16\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\3\10\1\222\26\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\3\10\1\223\26\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\13\10\1\224\16\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\4\10"+
    "\1\225\25\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\4\10\1\226\14\10\1\227\10\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\1\230\31\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\15\10\1\231"+
    "\14\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\4\10\1\232\25\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\22\10\1\233\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\3\10\1\234\26\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\20\10\1\235"+
    "\11\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\20\10\1\236\11\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\31\10\1\237\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\16\10\1\240\13\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\10\10\1\241\21\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\4\10"+
    "\1\242\25\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\15\10\1\243\14\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\2\10\1\244\27\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\22\10\1\245\7\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\3\10"+
    "\1\246\26\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\22\10\1\247\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\11\10\1\250\20\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\3\10\1\251\26\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\4\10"+
    "\1\252\25\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\21\10\1\253\10\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\17\10\1\254\12\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\10\10\1\255\21\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\16\10"+
    "\1\256\13\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\13\10\1\257\16\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\22\10\1\260\7\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\15\10\1\261\14\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\3\10"+
    "\1\262\26\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\22\10\1\263\7\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\1\264\31\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\22\10\1\265\7\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\13\10\1\266"+
    "\16\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\1\10\1\267\30\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\1\10\1\270\30\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\3\10\1\271\26\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\5\10\1\272"+
    "\24\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\1\10\1\273\30\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\5\10\1\274\24\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\5\10\1\275\24\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\4\10\1\276"+
    "\25\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\14\10\1\277\15\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\3\10\1\300\26\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\1\301\31\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\10\10\1\302\21\10"+
    "\1\0\1\10\3\0\3\10\1\0\1\10\20\0\13\10"+
    "\1\303\16\10\1\0\1\10\3\0\3\10\1\0\1\10"+
    "\20\0\10\10\1\304\21\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\11\10\1\305\20\10\1\0\1\10"+
    "\3\0\3\10\1\0\1\10\20\0\22\10\1\306\7\10"+
    "\1\0\1\10\3\0\2\10\1\307\1\0\1\10\20\0"+
    "\32\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\10\10\1\310\21\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\1\311\31\10\1\0\1\10\3\0\3\10"+
    "\1\0\1\10\20\0\1\312\31\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\2\10\1\313\27\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\25\10\1\314"+
    "\4\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\3\10\1\315\26\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\13\10\1\316\16\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\5\10\1\317\24\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\3\10\1\320"+
    "\26\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\3\10\1\321\26\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\3\10\1\322\26\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\10\10\1\323\21\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\10\10\1\324"+
    "\21\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\10\10\1\325\21\10\1\0\1\10\3\0\3\10\1\0"+
    "\1\10\20\0\3\10\1\326\26\10\1\0\1\10\3\0"+
    "\3\10\1\0\1\10\20\0\2\10\1\327\27\10\1\0"+
    "\1\10\3\0\3\10\1\0\1\10\20\0\3\10\1\330"+
    "\26\10\1\0\1\10\3\0\3\10\1\0\1\10\20\0"+
    "\5\10\1\331\24\10\1\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7748];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\4\1\1\11\2\1\4\11\2\1"+
    "\10\11\22\1\2\11\4\1\1\0\3\11\40\1\12\11"+
    "\1\0\171\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private static final short ERROR = -1;
  
    private String string_error = null;
    private StringBuilder string = new StringBuilder();
    
    private boolean in_basic_file = true;
    public void set_in_basic_file(boolean v) {
	    in_basic_file = v;
	}
    
    private Symbol newToken(short id) {
        return new Symbol(id, yyline + 1, yycolumn + 1, yylength());
    }

    private Symbol newToken(short id, Object value) {
        return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
    }
	
	private scala.Symbol sym(String s) {
		return scala.Symbol$.MODULE$.apply(s);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CoolJFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CoolJFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { return newToken(DEF);
          }
        case 81: break;
        case 16: 
          { return newToken(SEMI);
          }
        case 82: break;
        case 38: 
          { string.append( "\n" );
          }
        case 83: break;
        case 66: 
          { return newToken(ERROR, "Illegal keyword 'sealed'");
          }
        case 84: break;
        case 61: 
          { return newToken(ERROR, "Illegal keyword 'throw'");
          }
        case 85: break;
        case 27: 
          { return newToken(EQEQ);
          }
        case 86: break;
        case 54: 
          { return newToken(NULL);
          }
        case 87: break;
        case 74: 
          { return newToken(ERROR, "Illegal keyword 'package'");
          }
        case 88: break;
        case 9: 
          { return newToken(PLUS);
          }
        case 89: break;
        case 48: 
          { return newToken(VAR);
          }
        case 90: break;
        case 34: 
          { string_error = "Newlines cannot be escaped";
          }
        case 91: break;
        case 12: 
          { return newToken(ASSIGN);
          }
        case 92: break;
        case 78: 
          { return newToken(OVERRIDE);
          }
        case 93: break;
        case 58: 
          { return newToken(SUPER);
          }
        case 94: break;
        case 10: 
          { return newToken(MINUS);
          }
        case 95: break;
        case 11: 
          { return newToken(BANG);
          }
        case 96: break;
        case 33: 
          { string_error = "Illegal backslash escape: " + yytext();
          }
        case 97: break;
        case 32: 
          { return newToken(IF);
          }
        case 98: break;
        case 18: 
          { return newToken(LPAREN);
          }
        case 99: break;
        case 55: 
          { return newToken(ERROR, "Illegal keyword 'with'");
          }
        case 100: break;
        case 51: 
          { return newToken(ERROR, "Illegal keyword 'lazy'");
          }
        case 101: break;
        case 77: 
          { return newToken(ERROR, "Illegal keyword 'implicit'");
          }
        case 102: break;
        case 17: 
          { return newToken(COLON);
          }
        case 103: break;
        case 80: 
          { return newToken(ERROR, "Illegal keyword 'protected'");
          }
        case 104: break;
        case 39: 
          { string.append( "\r" );
          }
        case 105: break;
        case 29: 
          { return newToken(LE);
          }
        case 106: break;
        case 40: 
          { string.append( "\b" );
          }
        case 107: break;
        case 65: 
          { return newToken(ERROR, "Illegal keyword 'yield'");
          }
        case 108: break;
        case 24: 
          { yybegin(YYINITIAL); 
                  if (string_error == "")
                    return newToken(STR_LIT, sym(string.toString()));
		  else return newToken(ERROR, string_error);
          }
        case 109: break;
        case 64: 
          { return newToken(WHILE);
          }
        case 110: break;
        case 35: 
          { string.append( "\"" );
          }
        case 111: break;
        case 1: 
          { return newToken(ERROR, "Illegal characters found on input: " + yytext());
          }
        case 112: break;
        case 45: 
          { return newToken(ERROR, "Illegal keyword 'try'");
          }
        case 113: break;
        case 7: 
          { return newToken(FSLASH);
          }
        case 114: break;
        case 62: 
          { return newToken(ERROR, "Illegal keyword 'trait'");
          }
        case 115: break;
        case 15: 
          { return newToken(COMMA);
          }
        case 116: break;
        case 41: 
          { string.append( "\\" );
          }
        case 117: break;
        case 56: 
          { return newToken(ERROR, "Illegal keyword 'catch'");
          }
        case 118: break;
        case 23: 
          { yybegin(YYINITIAL); 
                  return newToken(ERROR, "Unterminated string at end of line");
          }
        case 119: break;
        case 22: 
          { string.append(yytext());
          }
        case 120: break;
        case 49: 
          { return newToken(CASE);
          }
        case 121: break;
        case 26: 
          { return newToken(ERROR, "An identifier may not start with an underscore: " + yytext());
		  /* return newToken(OBJECTID, sym(yytext()));*/
          }
        case 122: break;
        case 60: 
          { return newToken(ERROR, "Illegal keyword 'final'");
          }
        case 123: break;
        case 71: 
          { return newToken(EXTENDS);
          }
        case 124: break;
        case 36: 
          { string.append( "\f" );
          }
        case 125: break;
        case 69: 
          { return newToken(ERROR, "Illegal keyword 'object'");
          }
        case 126: break;
        case 8: 
          { return newToken(STAR);
          }
        case 127: break;
        case 46: 
          { return newToken(NEW);
          }
        case 128: break;
        case 21: 
          { return newToken(RBRACE);
          }
        case 129: break;
        case 25: 
          { yybegin(YYINITIAL); 
                  return newToken(ERROR, "Backslash at end of file");
          }
        case 130: break;
        case 59: 
          { return newToken(BOOL_LIT, false);
          }
        case 131: break;
        case 63: 
          { return newToken(MATCH);
          }
        case 132: break;
        case 5: 
          { yybegin(STRING); string_error = ""; string.setLength(0);
          }
        case 133: break;
        case 28: 
          { return newToken(ARROW);
          }
        case 134: break;
        case 42: 
          { string.append( "\0" );
          }
        case 135: break;
        case 30: 
          { return newToken(EQ);
          }
        case 136: break;
        case 52: 
          { return newToken(BOOL_LIT, true);
          }
        case 137: break;
        case 44: 
          { return newToken(ERROR, "Illegal keyword 'for'");
          }
        case 138: break;
        case 67: 
          { if (!in_basic_file) {
                     return newToken(ERROR, "Keyword 'native' may only be used in basic classes");
                  }
                  return newToken(NATIVE);
          }
        case 139: break;
        case 50: 
          { return newToken(ELSE);
          }
        case 140: break;
        case 73: 
          { return newToken(ERROR, "Illegal keyword 'forSome'");
          }
        case 141: break;
        case 57: 
          { return newToken(CLASS);
          }
        case 142: break;
        case 6: 
          { return newToken(INT_LIT, sym(yytext()));
          }
        case 143: break;
        case 4: 
          { return newToken(OBJECTID, sym(yytext()));
          }
        case 144: break;
        case 13: 
          { return newToken(LT);
          }
        case 145: break;
        case 20: 
          { return newToken(LBRACE);
          }
        case 146: break;
        case 14: 
          { return newToken(DOT);
          }
        case 147: break;
        case 31: 
          { return newToken(ERROR, "Illegal keyword 'do'");
          }
        case 148: break;
        case 79: 
          { return newToken(ERROR, "Illegal keyword 'requires'");
          }
        case 149: break;
        case 70: 
          { return newToken(ERROR, "Illegal keyword 'return'");
          }
        case 150: break;
        case 72: 
          { return newToken(ERROR, "Illegal keyword 'finally'");
          }
        case 151: break;
        case 47: 
          { return newToken(ERROR, "Illegal keyword 'val'");
          }
        case 152: break;
        case 3: 
          { return newToken(TYPEID, sym(yytext()));
          }
        case 153: break;
        case 37: 
          { string.append( "\t" );
          }
        case 154: break;
        case 53: 
          { return newToken(ERROR, "Illegal keyword 'type'");
          }
        case 155: break;
        case 76: 
          { return newToken(ERROR, "Illegal keyword 'abstract'");
          }
        case 156: break;
        case 68: 
          { return newToken(ERROR, "Illegal keyword 'import'");
          }
        case 157: break;
        case 19: 
          { return newToken(RPAREN);
          }
        case 158: break;
        case 75: 
          { return newToken(ERROR, "Illegal keyword 'private'");
          }
        case 159: break;
        case 2: 
          { 
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); 
                  return newToken(ERROR, "Unterminated string at end of file");
            }
            case 218: break;
            case YYINITIAL: {
              return newToken(EOF);
            }
            case 219: break;
            default:
              { 	return newToken(EOF, "end-of-file");
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
