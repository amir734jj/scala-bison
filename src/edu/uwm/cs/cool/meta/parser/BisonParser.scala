/* Generated by Scala-Bison version 0.4 */

package edu.uwm.cs.cool.meta.parser;

import scala.io.Source;

object bisonParser {
  def main(args : Array[String]) = {
    for (s <- args) {
      val scanner : BisonScanner = new BisonScanner(Source.fromFile(s))
      val parser : BisonParser = new BisonParser();
      parser.reset(s,scanner);
      if (parser.yyparse()) {
	println(parser.result);
      }
    }
  }
}

/** Generated LALR(1) recursive-ascent-descent parser */
class BisonParser {
  class YYNonterminal extends BisonTokens.YYSymbol;

  case class YYNTerror(yy : String) extends YYNonterminal;
  case class YYNTsymbol(yy: Symbol) extends YYNonterminal;
  case class YYNTanon(yy: Symbol) extends YYNonterminal;
  case class YYNTrhs(yy: List[Symbol]) extends YYNonterminal;
  case class YYNTblock(yy: Code) extends YYNonterminal;
  case class YYNTpiece(yy: Code) extends YYNonterminal;
  case class YYNTaction(yy: (Symbol,Code)) extends YYNonterminal;
  case class YYNTrev_pieces(yy: List[Code]) extends YYNonterminal;
  case class YYNTprecedence(yy: Precedence) extends YYNonterminal;
  case class YYNTgrammar(yy: BisonGrammar) extends YYNonterminal;
  case class YYNTdeclarations(yy: Unit) extends YYNonterminal;
  case class YYNTrules(yy: Unit) extends YYNonterminal;
  case class YYNTdeclaration(yy: Unit) extends YYNonterminal;
  case class YYNTtoken_names(yy: Unit) extends YYNonterminal;
  case class YYNTnonterminal_names(yy: Unit) extends YYNonterminal;
  case class YYNTtoken_name(yy: Unit) extends YYNonterminal;
  case class YYNTnonterminal_name(yy: Unit) extends YYNonterminal;
  case class YYNTrule(yy: Unit) extends YYNonterminal;
  case class YYNTmorerules(yy: Unit) extends YYNonterminal;

  private class YYGoto;
  private case class YYBase(yy : YYNonterminal) extends YYGoto
  private case class YYNested(yy : YYGoto) extends YYGoto

  case class YYError(s:String) extends Exception(s);

  // boilerplate

  var yydebug = 0;
  private var yyinput : Iterator[BisonTokens.YYToken] = null;
  private var yycur : BisonTokens.YYToken = null;

  private def yynext() = {
    yycur = {
      if (yyinput hasNext) {
	yyinput.next
      } else {
	BisonTokens.YYEOF();
      }
    }
    if (yydebug > 0) println("Current token now is " + yycur);
  }

  private def yypanic(test : (BisonTokens.YYToken) => Boolean) = {
    while (!test(yycur)) yynext;
  }

  def yyreset(input : Iterator[BisonTokens.YYToken]) = {
    yyinput = input;
    yynext
  }

  def yyparse() : Boolean = {
    try {
      parse_grammar()
      parse_YYEOF()
      true
    } catch {
      case YYError(s) => yyerror(s); false
    }
  }

  private def yynest(nx:Int,g: => YYNonterminal) : YYGoto = {
    try {
      var n : Int = nx;
      var yygoto : YYGoto = YYBase(g)
      while (n > 0) {
        yygoto = YYNested(yygoto)
        n -= 1
      }
      yygoto
    } catch {
      case YYError(s) => YYBase(YYNTerror(s))
    }
  }

  def parse_YYCHAR(yy:Char) : Unit = {
    yycur match {
      case BisonTokens.YYCHAR(`yy`) => yynext; ()
      case _ => throw new YYError("Expected '"+yy+"'");
    }
  }

  // generated parser

  def parse_YYEOF() : Unit = {
    yycur match {
      case BisonTokens.YYEOF() => yynext; ()
      case _ => throw new YYError("Expected 'YYEOF'");
    }
  }

  def parse_CHARLIT() : Char = {
    yycur match {
      case BisonTokens.CHARLIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'CHARLIT'");
    }
  }

  def parse_ID() : String = {
    yycur match {
      case BisonTokens.ID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'ID'");
    }
  }

  def parse_BEGIN() : Unit = {
    yycur match {
      case BisonTokens.BEGIN() => yynext; ()
      case _ => throw new YYError("Expected 'BEGIN'");
    }
  }

  def parse_PROLOGUE_BEGIN() : Unit = {
    yycur match {
      case BisonTokens.PROLOGUE_BEGIN() => yynext; ()
      case _ => throw new YYError("Expected 'PROLOGUE_BEGIN'");
    }
  }

  def parse_PROLOGUE_END() : Unit = {
    yycur match {
      case BisonTokens.PROLOGUE_END() => yynext; ()
      case _ => throw new YYError("Expected 'PROLOGUE_END'");
    }
  }

  def parse_LEFT() : Unit = {
    yycur match {
      case BisonTokens.LEFT() => yynext; ()
      case _ => throw new YYError("Expected 'LEFT'");
    }
  }

  def parse_RIGHT() : Unit = {
    yycur match {
      case BisonTokens.RIGHT() => yynext; ()
      case _ => throw new YYError("Expected 'RIGHT'");
    }
  }

  def parse_NONASSOC() : Unit = {
    yycur match {
      case BisonTokens.NONASSOC() => yynext; ()
      case _ => throw new YYError("Expected 'NONASSOC'");
    }
  }

  def parse_TOKEN() : Unit = {
    yycur match {
      case BisonTokens.TOKEN() => yynext; ()
      case _ => throw new YYError("Expected 'TOKEN'");
    }
  }

  def parse_TYPE() : Unit = {
    yycur match {
      case BisonTokens.TYPE() => yynext; ()
      case _ => throw new YYError("Expected 'TYPE'");
    }
  }

  def parse_START() : Unit = {
    yycur match {
      case BisonTokens.START() => yynext; ()
      case _ => throw new YYError("Expected 'START'");
    }
  }

  def parse_PREC() : Unit = {
    yycur match {
      case BisonTokens.PREC() => yynext; ()
      case _ => throw new YYError("Expected 'PREC'");
    }
  }

  def parse_VAR() : Int = {
    yycur match {
      case BisonTokens.VAR(yy) => yynext; yy
      case _ => throw new YYError("Expected 'VAR'");
    }
  }

  def parse_TYPELIT() : String = {
    yycur match {
      case BisonTokens.TYPELIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'TYPELIT'");
    }
  }

  def parse_CODE() : String = {
    yycur match {
      case BisonTokens.CODE(yy) => yynext; yy
      case _ => throw new YYError("Expected 'CODE'");
    }
  }

  def parse_END() : String = {
    yycur match {
      case BisonTokens.END(yy) => yynext; yy
      case _ => throw new YYError("Expected 'END'");
    }
  }

  def parse_declaration() : Unit = {
    if (yydebug>0) println("Parsing declaration");
    yystate5() match {
      case YYBase(YYNTdeclaration(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_piece() : Code = {
    if (yydebug>0) println("Parsing piece");
    yystate31() match {
      case YYBase(YYNTpiece(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_rules() : Unit = {
    if (yydebug>0) println("Parsing rules");
    yystate3() match {
      case YYBase(YYNTrules(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_block() : Code = {
    if (yydebug>0) println("Parsing block");
    yystate30() match {
      case YYBase(YYNTblock(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_declarations() : Unit = {
    if (yydebug>0) println("Parsing declarations");
    yystate1() match {
      case YYBase(YYNTdeclarations(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_rev_pieces() : List[Code] = {
    if (yydebug>0) println("Parsing rev_pieces");
    yystate6() match {
      case YYBase(YYNTrev_pieces(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_symbol() : Symbol = {
    if (yydebug>0) println("Parsing symbol");
    yystate29() match {
      case YYBase(YYNTsymbol(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_rule() : Unit = {
    if (yydebug>0) println("Parsing rule");
    yystate15() match {
      case YYBase(YYNTrule(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_precedence() : Precedence = {
    if (yydebug>0) println("Parsing precedence");
    yystate10() match {
      case YYBase(YYNTprecedence(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_token_name() : Unit = {
    if (yydebug>0) println("Parsing token_name");
    yystate13() match {
      case YYBase(YYNTtoken_name(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_grammar() : BisonGrammar = {
    if (yydebug>0) println("Parsing grammar");
    yystate0() match {
      case YYBase(YYNTgrammar(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_nonterminal_names() : Unit = {
    if (yydebug>0) println("Parsing nonterminal_names");
    yystate11() match {
      case YYBase(YYNTnonterminal_names(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_nonterminal_name() : Unit = {
    if (yydebug>0) println("Parsing nonterminal_name");
    yystate14() match {
      case YYBase(YYNTnonterminal_name(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_morerules() : Unit = {
    if (yydebug>0) println("Parsing morerules");
    yystate24() match {
      case YYBase(YYNTmorerules(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }

  def parse_token_names() : Unit = {
    if (yydebug>0) println("Parsing token_names");
    yystate8() match {
      case YYBase(YYNTtoken_names(yy)) => yy
      case YYBase(YYNTerror(s)) => throw new YYError(s)
      case _ => throw new YYError("internal parser error")
    }
  }


  /** Recursive descent parser after recognition point
   * grammar: . declarations BEGIN rules END
   */
  private def yyrule1() : BisonGrammar = {
    var yyresult : BisonGrammar = null;
    if (yydebug>0) println("Announcing rule 1");
    parse_declarations();
    parse_BEGIN();
    parse_rules();
    val yyarg4 : String = parse_END();
    { result.addExtra(yyarg4); yyresult = result; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * declarations: .
   */
  private def yyrule2() : Unit = {
    if (yydebug>0) println("Announcing rule 2");
  }

  /** Recursive descent parser after recognition point
   * declarations: declarations . @1 declaration
   */
  private def yyrule4() : Unit = {
    if (yydebug>0) println("Announcing rule 4");
    { symbol_type = ""; prec = null; }
    parse_declaration();
  }

  /** Recursive descent parser after recognition point
   * declaration: . PROLOGUE_BEGIN rev_pieces PROLOGUE_END
   */
  private def yyrule5() : Unit = {
    if (yydebug>0) println("Announcing rule 5");
    parse_PROLOGUE_BEGIN();
    val yyarg2 : List[Code] = parse_rev_pieces();
    parse_PROLOGUE_END();
    { result.addPrologue(yyarg2 reverse); }
  }

  /** Recursive descent parser after recognition point
   * declaration: . TOKEN token_names
   */
  private def yyrule6() : Unit = {
    if (yydebug>0) println("Announcing rule 6");
    parse_TOKEN();
    parse_token_names();
  }

  /** Recursive descent parser after recognition point
   * declaration: . precedence @2 token_names
   */
  private def yyrule8() : Unit = {
    if (yydebug>0) println("Announcing rule 8");
    val yyarg1 : Precedence = parse_precedence();
    { prec = yyarg1; }
    parse_token_names();
  }

  /** Recursive descent parser after recognition point
   * declaration: . TYPE TYPELIT @3 nonterminal_names
   */
  private def yyrule10() : Unit = {
    if (yydebug>0) println("Announcing rule 10");
    parse_TYPE();
    val yyarg2 : String = parse_TYPELIT();
    { symbol_type = yyarg2; }
    parse_nonterminal_names();
  }

  /** Recursive descent parser after recognition point
   * declaration: . START ID
   */
  private def yyrule11() : Unit = {
    if (yydebug>0) println("Announcing rule 11");
    parse_START();
    val yyarg2 : String = parse_ID();
    { result.setStart(result.getNT(yyarg2)); }
  }

  /** Recursive descent parser after recognition point
   * token_names: token_names . token_name
   */
  private def yyrule12() : Unit = {
    if (yydebug>0) println("Announcing rule 12");
    parse_token_name();
  }

  /** Recursive descent parser after recognition point
   * token_names: . token_name
   */
  private def yyrule13() : Unit = {
    if (yydebug>0) println("Announcing rule 13");
    parse_token_name();
  }

  /** Recursive descent parser after recognition point
   * token_name: . ID
   */
  private def yyrule14() : Unit = {
    if (yydebug>0) println("Announcing rule 14");
    val yyarg1 : String = parse_ID();
    { val t : Terminal = result.add(new Terminal(yyarg1,symbol_type));
		  if (prec != null) t.setPrecedence(prec); }
  }

  /** Recursive descent parser after recognition point
   * token_name: . CHARLIT
   */
  private def yyrule15() : Unit = {
    if (yydebug>0) println("Announcing rule 15");
    val yyarg1 : Char = parse_CHARLIT();
    { val t : Terminal = result.add(new CharLitTerminal(yyarg1));
		  if (prec != null) t.setPrecedence(prec); }
  }

  /** Recursive descent parser after recognition point
   * token_name: . TYPELIT
   */
  private def yyrule16() : Unit = {
    if (yydebug>0) println("Announcing rule 16");
    val yyarg1 : String = parse_TYPELIT();
    { symbol_type = yyarg1; }
  }

  /** Recursive descent parser after recognition point
   * nonterminal_names: nonterminal_names . nonterminal_name
   */
  private def yyrule17() : Unit = {
    if (yydebug>0) println("Announcing rule 17");
    parse_nonterminal_name();
  }

  /** Recursive descent parser after recognition point
   * nonterminal_names: . nonterminal_name
   */
  private def yyrule18() : Unit = {
    if (yydebug>0) println("Announcing rule 18");
    parse_nonterminal_name();
  }

  /** Recursive descent parser after recognition point
   * nonterminal_name: . ID
   */
  private def yyrule19() : Unit = {
    if (yydebug>0) println("Announcing rule 19");
    val yyarg1 : String = parse_ID();
    { result.add(new Nonterminal(yyarg1,symbol_type)); }
  }

  /** Recursive descent parser after recognition point
   * precedence: . LEFT
   */
  private def yyrule20() : Precedence = {
    var yyresult : Precedence = null;
    if (yydebug>0) println("Announcing rule 20");
    parse_LEFT();
    { precLevel += 1; yyresult = new LeftPrecedence(precLevel); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * precedence: . RIGHT
   */
  private def yyrule21() : Precedence = {
    var yyresult : Precedence = null;
    if (yydebug>0) println("Announcing rule 21");
    parse_RIGHT();
    { precLevel += 1; yyresult = new RightPrecedence(precLevel); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * precedence: . NONASSOC
   */
  private def yyrule22() : Precedence = {
    var yyresult : Precedence = null;
    if (yydebug>0) println("Announcing rule 22");
    parse_NONASSOC();
    { precLevel += 1; yyresult = new NonAssocPrecedence(precLevel); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rules: .
   */
  private def yyrule23() : Unit = {
    if (yydebug>0) println("Announcing rule 23");
  }

  /** Recursive descent parser after recognition point
   * rules: rules . rule
   */
  private def yyrule24() : Unit = {
    if (yydebug>0) println("Announcing rule 24");
    parse_rule();
  }

  /** Recursive descent parser after recognition point
   * rule: ID ':' rhs action . @4 morerules ';'
   */
  private def yyrule26(yyarg1 : String, yyarg3 : List[Symbol], yyarg4 : (Symbol,Code)) : Unit = {
    if (yydebug>0) println("Announcing rule 26");
    { currNT = result.getNT(yyarg1); 
		  result.addRule(new Rule(genRuleNum(),currNT,yyarg3,getPrec(yyarg3,yyarg4._1),yyarg4._2)); }
    parse_morerules();
    parse_YYCHAR(';');
  }

  /** Recursive descent parser after recognition point
   * morerules: .
   */
  private def yyrule27() : Unit = {
    if (yydebug>0) println("Announcing rule 27");
  }

  /** Recursive descent parser after recognition point
   * morerules: morerules '|' rhs action .
   */
  private def yyrule28(yyarg3 : List[Symbol], yyarg4 : (Symbol,Code)) : Unit = {
    if (yydebug>0) println("Announcing rule 28");
    { result.addRule(new Rule(genRuleNum(),currNT,yyarg3,getPrec(yyarg3,yyarg4._1),yyarg4._2)); }
  }

  /** Recursive descent parser after recognition point
   * rhs: .
   */
  private def yyrule29() : List[Symbol] = {
    var yyresult : List[Symbol] = null;
    if (yydebug>0) println("Announcing rule 29");
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rhs: rhs . symbol
   */
  private def yyrule30(yyarg1 : List[Symbol]) : List[Symbol] = {
    var yyresult : List[Symbol] = null;
    if (yydebug>0) println("Announcing rule 30");
    val yyarg2 : Symbol = parse_symbol();
    { yyresult = yyarg1 ++ (yyarg2 :: Nil) }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rhs: rhs anon . symbol
   */
  private def yyrule31(yyarg1 : List[Symbol], yyarg2 : Symbol) : List[Symbol] = {
    var yyresult : List[Symbol] = null;
    if (yydebug>0) println("Announcing rule 31");
    val yyarg3 : Symbol = parse_symbol();
    { yyresult = yyarg1 ++ (yyarg2 :: yyarg3 :: Nil) }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * anon: block .
   */
  private def yyrule32(yyarg1 : Code) : Symbol = {
    var yyresult : Symbol = null;
    if (yydebug>0) println("Announcing rule 32");
    { uniq += 1;
		  val nt : Nonterminal = result.add(new ArtificialNonterminal("@" + uniq,"unit"));
		  result.addRule(new Rule(genRuleNum(),nt,Nil,null,yyarg1));
		  yyresult = nt; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * symbol: . ID
   */
  private def yyrule33() : Symbol = {
    var yyresult : Symbol = null;
    if (yydebug>0) println("Announcing rule 33");
    val yyarg1 : String = parse_ID();
    { yyresult = result.get(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * symbol: . CHARLIT
   */
  private def yyrule34() : Symbol = {
    var yyresult : Symbol = null;
    if (yydebug>0) println("Announcing rule 34");
    val yyarg1 : Char = parse_CHARLIT();
    { yyresult = result.getCLT(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * action: block .
   */
  private def yyrule35(yyarg1 : Code) : (Symbol,Code) = {
    var yyresult : (Symbol,Code) = null;
    if (yydebug>0) println("Announcing rule 35");
    { yyresult = (null,yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * action: PREC symbol . block
   */
  private def yyrule36(yyarg2 : Symbol) : (Symbol,Code) = {
    var yyresult : (Symbol,Code) = null;
    if (yydebug>0) println("Announcing rule 36");
    val yyarg3 : Code = parse_block();
    { yyresult = (yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * action: PREC symbol .
   */
  private def yyrule37(yyarg2 : Symbol) : (Symbol,Code) = {
    var yyresult : (Symbol,Code) = null;
    if (yydebug>0) println("Announcing rule 37");
    { yyresult = (yyarg2,NoCode()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * action: .
   */
  private def yyrule38() : (Symbol,Code) = {
    var yyresult : (Symbol,Code) = null;
    if (yydebug>0) println("Announcing rule 38");
    { yyresult = (null,NoCode()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * block: . '{' rev_pieces '}'
   */
  private def yyrule39() : Code = {
    var yyresult : Code = null;
    if (yydebug>0) println("Announcing rule 39");
    parse_YYCHAR('{');
    val yyarg2 : List[Code] = parse_rev_pieces();
    parse_YYCHAR('}');
    { yyresult = BlockCode(yyarg2 reverse); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rev_pieces: .
   */
  private def yyrule40() : List[Code] = {
    var yyresult : List[Code] = null;
    if (yydebug>0) println("Announcing rule 40");
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * rev_pieces: rev_pieces . piece
   */
  private def yyrule41(yyarg1 : List[Code]) : List[Code] = {
    var yyresult : List[Code] = null;
    if (yydebug>0) println("Announcing rule 41");
    val yyarg2 : Code = parse_piece();
    { yyresult = yyarg2 :: yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * piece: . block
   */
  private def yyrule42() : Code = {
    var yyresult : Code = null;
    if (yydebug>0) println("Announcing rule 42");
    val yyarg1 : Code = parse_block();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * piece: . CODE
   */
  private def yyrule43() : Code = {
    var yyresult : Code = null;
    if (yydebug>0) println("Announcing rule 43");
    val yyarg1 : String = parse_CODE();
    { yyresult = LiteralCode(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * piece: . VAR
   */
  private def yyrule44() : Code = {
    var yyresult : Code = null;
    if (yydebug>0) println("Announcing rule 44");
    val yyarg1 : Int = parse_VAR();
    { yyresult = VariableCode(yyarg1); }
    yyresult
  }

  private def yystate5() : YYGoto = {
    if (yydebug > 0) println("Entering state 5")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.NONASSOC() => yygoto = yynest(0,YYNTdeclaration(yyrule8()))
      case BisonTokens.START() => yygoto = yynest(0,YYNTdeclaration(yyrule11()))
      case BisonTokens.TOKEN() => yygoto = yynest(0,YYNTdeclaration(yyrule6()))
      case BisonTokens.TYPE() => yygoto = yynest(0,YYNTdeclaration(yyrule10()))
      case BisonTokens.RIGHT() => yygoto = yynest(0,YYNTdeclaration(yyrule8()))
      case BisonTokens.LEFT() => yygoto = yynest(0,YYNTdeclaration(yyrule8()))
      case BisonTokens.PROLOGUE_BEGIN() => yygoto = yynest(0,YYNTdeclaration(yyrule5()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTdeclaration) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate31() : YYGoto = {
    if (yydebug > 0) println("Entering state 31")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR('{') => yygoto = yynest(0,YYNTpiece(yyrule42()))
      case BisonTokens.VAR(yyarg1) => yygoto = yynest(0,YYNTpiece(yyrule44()))
      case BisonTokens.CODE(yyarg1) => yygoto = yynest(0,YYNTpiece(yyrule43()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTpiece) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate4() : YYGoto = {
    if (yydebug > 0) println("Entering state 4")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.END(yyarg2) => yygoto = YYNested(YYNested(YYBase(YYNTrules(()))));
      case BisonTokens.ID(yyarg2) => yygoto = yynest(1,YYNTrules(yyrule24()))
      case _ => yygoto = YYNested(YYNested(YYBase(YYNTrules(()))));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTrules) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate3() : YYGoto = {
    if (yydebug > 0) println("Entering state 3")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTrules(yyrule23()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTrules(yyarg1)) => yygoto = yystate4();
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate30() : YYGoto = {
    if (yydebug > 0) println("Entering state 30")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR('{') => yygoto = yynest(0,YYNTblock(yyrule39()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTblock) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate2() : YYGoto = {
    if (yydebug > 0) println("Entering state 2")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.BEGIN() => yygoto = YYNested(YYNested(YYBase(YYNTdeclarations(()))));
      case _ => yygoto = yynest(1,YYNTdeclarations(yyrule4()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTdeclarations) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate1() : YYGoto = {
    if (yydebug > 0) println("Entering state 1")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTdeclarations(yyrule2()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTdeclarations(yyarg1)) => yygoto = yystate2();
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate7(yyarg1: List[Code]) : YYGoto = {
    if (yydebug > 0) println("Entering state 7")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.PROLOGUE_END() => yygoto = YYNested(YYNested(YYBase(YYNTrev_pieces(yyarg1))));
      case BisonTokens.YYCHAR('{') => yygoto = yynest(1,YYNTrev_pieces(yyrule41(yyarg1)))
      case BisonTokens.VAR(yyarg2) => yygoto = yynest(1,YYNTrev_pieces(yyrule41(yyarg1)))
      case BisonTokens.CODE(yyarg2) => yygoto = yynest(1,YYNTrev_pieces(yyrule41(yyarg1)))
      case _ => yygoto = YYNested(YYNested(YYBase(YYNTrev_pieces(yyarg1))));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTrev_pieces) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate6() : YYGoto = {
    if (yydebug > 0) println("Entering state 6")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTrev_pieces(yyrule40()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTrev_pieces(yyarg1)) => yygoto = yystate7(yyarg1);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate29() : YYGoto = {
    if (yydebug > 0) println("Entering state 29")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg1) => yygoto = yynest(0,YYNTsymbol(yyrule34()))
      case BisonTokens.ID(yyarg1) => yygoto = yynest(0,YYNTsymbol(yyrule33()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTsymbol) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate20(yyarg2: Symbol) : YYGoto = {
    if (yydebug > 0) println("Entering state 20")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR('{') => yygoto = yynest(2,YYNTaction(yyrule36(yyarg2)))
      case _ => yygoto = yynest(2,YYNTaction(yyrule37(yyarg2)))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate19() : YYGoto = {
    if (yydebug > 0) println("Entering state 19")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg2) => yygoto = yynest(0,YYNTsymbol(yyrule34()))
      case BisonTokens.ID(yyarg2) => yygoto = yynest(0,YYNTsymbol(yyrule33()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTsymbol(yyarg2)) => yygoto = yystate20(yyarg2);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate21(yyarg1: String, yyarg3: List[Symbol], yyarg4: (Symbol,Code)) : YYGoto = {
    if (yydebug > 0) println("Entering state 21")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(4,YYNTrule(yyrule26(yyarg1,yyarg3,yyarg4)))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate22(yyarg1: List[Symbol], yyarg2: Symbol) : YYGoto = {
    if (yydebug > 0) println("Entering state 22")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg3) => yygoto = yynest(2,YYNTrhs(yyrule31(yyarg1,yyarg2)))
      case BisonTokens.ID(yyarg3) => yygoto = yynest(2,YYNTrhs(yyrule31(yyarg1,yyarg2)))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate23(yyarg1: Code) : YYGoto = {
    if (yydebug > 0) println("Entering state 23")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR(';') => yygoto = yynest(1,YYNTaction(yyrule35(yyarg1)))
      case BisonTokens.YYCHAR('|') => yygoto = yynest(1,YYNTaction(yyrule35(yyarg1)))
      case _ => yygoto = yynest(1,YYNTanon(yyrule32(yyarg1)))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate18(yyarg1: String, yyarg3: List[Symbol]) : YYGoto = {
    if (yydebug > 0) println("Entering state 18")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg4) => yygoto = yynest(1,YYNTrhs(yyrule30(yyarg3)))
      case BisonTokens.PREC() => yynext; yygoto = yystate19();
      case BisonTokens.YYCHAR('{') => yygoto = yynest(0,YYNTblock(yyrule39()))
      case BisonTokens.ID(yyarg4) => yygoto = yynest(1,YYNTrhs(yyrule30(yyarg3)))
      case _ => yygoto = yynest(0,YYNTaction(yyrule38()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTaction(yyarg4)) => yygoto = yystate21(yyarg1,yyarg3,yyarg4);
        case YYBase(YYNTanon(yyarg4)) => yygoto = yystate22(yyarg3,yyarg4);
        case YYBase(YYNTblock(yyarg4)) => yygoto = yystate23(yyarg4);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate17(yyarg1: String) : YYGoto = {
    if (yydebug > 0) println("Entering state 17")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTrhs(yyrule29()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTrhs(yyarg3)) => yygoto = yystate18(yyarg1,yyarg3);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate16(yyarg1: String) : YYGoto = {
    if (yydebug > 0) println("Entering state 16")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR(':') => yynext; yygoto = yystate17(yyarg1);
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate15() : YYGoto = {
    if (yydebug > 0) println("Entering state 15")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.ID(yyarg1) => yynext; yygoto = yystate16(yyarg1);
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTrule) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate10() : YYGoto = {
    if (yydebug > 0) println("Entering state 10")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.NONASSOC() => yygoto = yynest(0,YYNTprecedence(yyrule22()))
      case BisonTokens.RIGHT() => yygoto = yynest(0,YYNTprecedence(yyrule21()))
      case BisonTokens.LEFT() => yygoto = yynest(0,YYNTprecedence(yyrule20()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTprecedence) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate13() : YYGoto = {
    if (yydebug > 0) println("Entering state 13")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg1) => yygoto = yynest(0,YYNTtoken_name(yyrule15()))
      case BisonTokens.TYPELIT(yyarg1) => yygoto = yynest(0,YYNTtoken_name(yyrule16()))
      case BisonTokens.ID(yyarg1) => yygoto = yynest(0,YYNTtoken_name(yyrule14()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTtoken_name) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate0() : YYGoto = {
    if (yydebug > 0) println("Entering state 0")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTgrammar(yyrule1()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTgrammar) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate12() : YYGoto = {
    if (yydebug > 0) println("Entering state 12")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.ID(yyarg2) => yygoto = yynest(1,YYNTnonterminal_names(yyrule17()))
      case _ => yygoto = YYNested(YYNested(YYBase(YYNTnonterminal_names(()))));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTnonterminal_names) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate11() : YYGoto = {
    if (yydebug > 0) println("Entering state 11")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.ID(yyarg1) => yygoto = yynest(0,YYNTnonterminal_names(yyrule18()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTnonterminal_names(yyarg1)) => yygoto = yystate12();
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate14() : YYGoto = {
    if (yydebug > 0) println("Entering state 14")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.ID(yyarg1) => yygoto = yynest(0,YYNTnonterminal_name(yyrule19()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTnonterminal_name) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate28(yyarg3: List[Symbol], yyarg4: (Symbol,Code)) : YYGoto = {
    if (yydebug > 0) println("Entering state 28")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(4,YYNTmorerules(yyrule28(yyarg3,yyarg4)))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate27(yyarg3: List[Symbol]) : YYGoto = {
    if (yydebug > 0) println("Entering state 27")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg4) => yygoto = yynest(1,YYNTrhs(yyrule30(yyarg3)))
      case BisonTokens.PREC() => yynext; yygoto = yystate19();
      case BisonTokens.YYCHAR('{') => yygoto = yynest(0,YYNTblock(yyrule39()))
      case BisonTokens.ID(yyarg4) => yygoto = yynest(1,YYNTrhs(yyrule30(yyarg3)))
      case _ => yygoto = yynest(0,YYNTaction(yyrule38()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTaction(yyarg4)) => yygoto = yystate28(yyarg3,yyarg4);
        case YYBase(YYNTanon(yyarg4)) => yygoto = yystate22(yyarg3,yyarg4);
        case YYBase(YYNTblock(yyarg4)) => yygoto = yystate23(yyarg4);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate26() : YYGoto = {
    if (yydebug > 0) println("Entering state 26")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTrhs(yyrule29()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTrhs(yyarg3)) => yygoto = yystate27(yyarg3);
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate25() : YYGoto = {
    if (yydebug > 0) println("Entering state 25")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.YYCHAR(';') => yygoto = YYNested(YYNested(YYBase(YYNTmorerules(()))));
      case BisonTokens.YYCHAR('|') => yynext; yygoto = yystate26();
      case _ => yygoto = YYNested(YYNested(YYBase(YYNTmorerules(()))));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTmorerules) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate24() : YYGoto = {
    if (yydebug > 0) println("Entering state 24")
    var yygoto : YYGoto = null;
    yycur match {
      case _ => yygoto = yynest(0,YYNTmorerules(yyrule27()))
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTmorerules(yyarg1)) => yygoto = yystate25();
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate9() : YYGoto = {
    if (yydebug > 0) println("Entering state 9")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg2) => yygoto = yynest(1,YYNTtoken_names(yyrule12()))
      case BisonTokens.TYPELIT(yyarg2) => yygoto = yynest(1,YYNTtoken_names(yyrule12()))
      case BisonTokens.ID(yyarg2) => yygoto = yynest(1,YYNTtoken_names(yyrule12()))
      case _ => yygoto = YYNested(YYNested(YYBase(YYNTtoken_names(()))));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case x@YYBase(_:YYNTtoken_names) => return x;
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }

  private def yystate8() : YYGoto = {
    if (yydebug > 0) println("Entering state 8")
    var yygoto : YYGoto = null;
    yycur match {
      case BisonTokens.CHARLIT(yyarg1) => yygoto = yynest(0,YYNTtoken_names(yyrule13()))
      case BisonTokens.TYPELIT(yyarg1) => yygoto = yynest(0,YYNTtoken_names(yyrule13()))
      case BisonTokens.ID(yyarg1) => yygoto = yynest(0,YYNTtoken_names(yyrule13()))
      case _ => yygoto = YYBase(YYNTerror("syntax error"));
    }
    while (true) {
      yygoto match {
        case YYNested(g) => return g;
        case YYBase(YYNTtoken_names(yyarg1)) => yygoto = yystate9();
        case e@YYBase(_:YYNTerror) => return e
        case _ => return YYBase(YYNTerror("internal parser error"));
      }
    }
    yygoto
  }


  def yyerror(s : String) = {
    errorsOccured = true;
    println(filename + ":" + scanner.getLineNumber + ":" + s);
  }

  var scanner : BisonScanner = null;
  var filename : String = "<unknown>";
  var errorsOccured : Boolean = false;
  var result : BisonGrammar = new BisonGrammar(); 
  var precLevel : Int = 0;
  var prec : Precedence = null;
  var symbol_type : String = "";
  var uniq : Int = 0;
  var currNT : Nonterminal = null;
  var rulenum : Int = 0;

  def genRuleNum() : Int = {
    rulenum += 1;
    rulenum
  }

  def getPrec(rhs:List[Symbol], sym : Symbol) : Precedence = {
    if (sym != null) return sym.precedence;
    for (sym <- rhs.reverse) {
      if (sym.precedence != null) return sym.precedence;
    }
    null
  }

  def reset(fn : String, sc : BisonScanner) = {
    filename = fn;
    scanner = sc;
    yyreset(sc);
    result = new BisonGrammar();
    precLevel = 0;
    prec = null;
    uniq = 0;
    currNT = null;
    rulenum = 0;
    errorsOccured = false;
  }


}
