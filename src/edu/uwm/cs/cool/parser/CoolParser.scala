/* Generated by Scala-Bison version 0.75 */

package edu.uwm.cs.cool.parser;
import edu.uwm.cs.cool.tree._;
import edu.uwm.cs.cool.scanner.CoolScanner;


/** Generated LALR(1) recursive-ascent-descent parser */
class CoolParser extends CoolParserBase {
  class YYNonterminal extends CoolTokens.YYSymbol;

  case class YYNTerror(yy : String) extends YYNonterminal;
  case class YYNTclass_list(yy: Classes) extends YYNonterminal;
  case class YYNTclass_decl(yy: Class_) extends YYNonterminal;
  case class YYNTsuperclass(yy: Symbol) extends YYNonterminal;
  case class YYNTfeature_list(yy: Features) extends YYNonterminal;
  case class YYNTfeature(yy: Feature) extends YYNonterminal;
  case class YYNTformals(yy: Formals) extends YYNonterminal;
  case class YYNTformal_list(yy: Formals) extends YYNonterminal;
  case class YYNTformal(yy: Formal) extends YYNonterminal;
  case class YYNTexpr(yy: Expression) extends YYNonterminal;
  case class YYNTblock(yy: Expression) extends YYNonterminal;
  case class YYNTactuals(yy: Expressions) extends YYNonterminal;
  case class YYNTexp_list(yy: Expressions) extends YYNonterminal;
  case class YYNTstmt_list(yy: Expressions) extends YYNonterminal;
  case class YYNTcase_list(yy: Cases) extends YYNonterminal;
  case class YYNTsimple_cases(yy: Cases) extends YYNonterminal;
  case class YYNTsimple_case(yy: Case) extends YYNonterminal;
  case class YYNTopt_override(yy: Boolean) extends YYNonterminal;
  case class YYNTprogram(yy: Unit) extends YYNonterminal;

  private var yynt : YYNonterminal = null;

  case class YYError(s:String) extends Exception(s);

  // boilerplate

  var yydebug : Boolean = false;
  private var yyinput : Iterator[CoolTokens.YYToken] = null;
  private var yycur : CoolTokens.YYToken = null;

  private def yynext() = {
    yycur = {
      if (yyinput hasNext) {
	yyinput.next
      } else {
	CoolTokens.YYEOF();
      }
    }
  }

  private def yypanic(test : (CoolTokens.YYToken) => Boolean) = {
    while (!test(yycur)) {
      yynext;
      if (yycur == CoolTokens.YYEOF()) throw new YYError("Giving up")
    }
  }

  def yyreset(input : Iterator[CoolTokens.YYToken]) = {
    yyinput = input;
    yynt = null;
    yynext
  }

  def yyparse() : Boolean = {
    try {
      parse_program()
      parse_YYEOF()
      true
    } catch {
      case YYError(s) => yyerror(s); false
    }
  }

  def parse_YYCHAR(yy:Char) : Unit = {
    yycur match {
      case CoolTokens.YYCHAR(`yy`) => yynext; ()
      case _ => throw new YYError("Expected '"+yy+"'");
    }
  }

  // generated parser

  def parse_YYEOF() : Unit = {
    yycur match {
      case CoolTokens.YYEOF() => yynext; ()
      case _ => throw new YYError("Expected 'YYEOF'");
    }
  }

  def parse_CASE() : Unit = {
    yycur match {
      case CoolTokens.CASE() => yynext; ()
      case _ => throw new YYError("Expected 'CASE'");
    }
  }

  def parse_CLASS() : Unit = {
    yycur match {
      case CoolTokens.CLASS() => yynext; ()
      case _ => throw new YYError("Expected 'CLASS'");
    }
  }

  def parse_DEF() : Unit = {
    yycur match {
      case CoolTokens.DEF() => yynext; ()
      case _ => throw new YYError("Expected 'DEF'");
    }
  }

  def parse_ELSE() : Unit = {
    yycur match {
      case CoolTokens.ELSE() => yynext; ()
      case _ => throw new YYError("Expected 'ELSE'");
    }
  }

  def parse_EQ() : Unit = {
    yycur match {
      case CoolTokens.EQ() => yynext; ()
      case _ => throw new YYError("Expected 'EQ'");
    }
  }

  def parse_EXTENDS() : Unit = {
    yycur match {
      case CoolTokens.EXTENDS() => yynext; ()
      case _ => throw new YYError("Expected 'EXTENDS'");
    }
  }

  def parse_IF() : Unit = {
    yycur match {
      case CoolTokens.IF() => yynext; ()
      case _ => throw new YYError("Expected 'IF'");
    }
  }

  def parse_MATCH() : Unit = {
    yycur match {
      case CoolTokens.MATCH() => yynext; ()
      case _ => throw new YYError("Expected 'MATCH'");
    }
  }

  def parse_NATIVE() : Unit = {
    yycur match {
      case CoolTokens.NATIVE() => yynext; ()
      case _ => throw new YYError("Expected 'NATIVE'");
    }
  }

  def parse_NEW() : Unit = {
    yycur match {
      case CoolTokens.NEW() => yynext; ()
      case _ => throw new YYError("Expected 'NEW'");
    }
  }

  def parse_NULL() : Unit = {
    yycur match {
      case CoolTokens.NULL() => yynext; ()
      case _ => throw new YYError("Expected 'NULL'");
    }
  }

  def parse_NOT() : Unit = {
    yycur match {
      case CoolTokens.NOT() => yynext; ()
      case _ => throw new YYError("Expected 'NOT'");
    }
  }

  def parse_OVERRIDE() : Unit = {
    yycur match {
      case CoolTokens.OVERRIDE() => yynext; ()
      case _ => throw new YYError("Expected 'OVERRIDE'");
    }
  }

  def parse_SUPER() : Unit = {
    yycur match {
      case CoolTokens.SUPER() => yynext; ()
      case _ => throw new YYError("Expected 'SUPER'");
    }
  }

  def parse_VAR() : Unit = {
    yycur match {
      case CoolTokens.VAR() => yynext; ()
      case _ => throw new YYError("Expected 'VAR'");
    }
  }

  def parse_WHILE() : Unit = {
    yycur match {
      case CoolTokens.WHILE() => yynext; ()
      case _ => throw new YYError("Expected 'WHILE'");
    }
  }

  def parse_STR_LIT() : Symbol = {
    yycur match {
      case CoolTokens.STR_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'STR_LIT'");
    }
  }

  def parse_INT_LIT() : Symbol = {
    yycur match {
      case CoolTokens.INT_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'INT_LIT'");
    }
  }

  def parse_BOOL_LIT() : Boolean = {
    yycur match {
      case CoolTokens.BOOL_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'BOOL_LIT'");
    }
  }

  def parse_TYPEID() : Symbol = {
    yycur match {
      case CoolTokens.TYPEID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'TYPEID'");
    }
  }

  def parse_OBJECTID() : Symbol = {
    yycur match {
      case CoolTokens.OBJECTID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'OBJECTID'");
    }
  }

  def parse_EQEQ() : Unit = {
    yycur match {
      case CoolTokens.EQEQ() => yynext; ()
      case _ => throw new YYError("Expected 'EQEQ'");
    }
  }

  def parse_LE() : Unit = {
    yycur match {
      case CoolTokens.LE() => yynext; ()
      case _ => throw new YYError("Expected 'LE'");
    }
  }

  def parse_ARROW() : Unit = {
    yycur match {
      case CoolTokens.ARROW() => yynext; ()
      case _ => throw new YYError("Expected 'ARROW'");
    }
  }

  def parse_ERROR() : String = {
    yycur match {
      case CoolTokens.ERROR(yy) => yynext; yy
      case _ => throw new YYError("Expected 'ERROR'");
    }
  }

  def parse_UNARY() : Unit = {
    yycur match {
      case CoolTokens.UNARY() => yynext; ()
      case _ => throw new YYError("Expected 'UNARY'");
    }
  }

  def parse_feature() : Feature = {
    yystate17();
    yynt match {
      case YYNTfeature(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_formal() : Formal = {
    yystate81();
    yynt match {
      case YYNTformal(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_program() : Unit = {
    yystate0();
    yynt match {
      case YYNTprogram(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_actuals() : Expressions = {
    yystate15();
    yynt match {
      case YYNTactuals(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_block() : Expression = {
    yystate78();
    yynt match {
      case YYNTblock(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_expr() : Expression = {
    yystate82();
    yynt match {
      case YYNTexpr(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_superclass() : Symbol = {
    yystate10();
    yynt match {
      case YYNTsuperclass(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_formals() : Formals = {
    yystate7();
    yynt match {
      case YYNTformals(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_formal_list() : Formals = {
    yystate79();
    yynt match {
      case YYNTformal_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_simple_case() : Case = {
    yystate100();
    yynt match {
      case YYNTsimple_case(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_class_list() : Classes = {
    yystate2();
    yynt match {
      case YYNTclass_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_feature_list() : Features = {
    yystate12();
    yynt match {
      case YYNTfeature_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_simple_cases() : Cases = {
    yystate98();
    yynt match {
      case YYNTsimple_cases(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_exp_list() : Expressions = {
    yystate96();
    yynt match {
      case YYNTexp_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_class_decl() : Class_ = {
    yystate6();
    yynt match {
      case YYNTclass_decl(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_stmt_list() : Expressions = {
    yystate84();
    yynt match {
      case YYNTstmt_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }


  /** Recursive descent parser after recognition point
   * program: . class_list
   */
  private def yyrule1() : Unit = {
    val yyarg1 : Classes = parse_class_list();
    { result = program(yyarg1); }
  }

  /** Recursive descent parser after recognition point
   * program: error .
   */
  private def yyrule2() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * class_list: . class_decl
   */
  private def yyrule3() : Classes = {
    var yyresult : Classes = null;
    val yyarg1 : Class_ = parse_class_decl();
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: error . ';'
   */
  private def yyrule4() : Classes = {
    var yyresult : Classes = null;
    parse_YYCHAR(';');
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: class_list . class_decl
   */
  private def yyrule5(yyarg1 : Classes) : Classes = {
    var yyresult : Classes = null;
    val yyarg2 : Class_ = parse_class_decl();
    { yyresult = yyarg1 + yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: class_list error . ';'
   */
  private def yyrule6(yyarg1 : Classes) : Classes = {
    var yyresult : Classes = null;
    parse_YYCHAR(';');
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_decl: . CLASS TYPEID formals superclass '{' feature_list '}'
   */
  private def yyrule7() : Class_ = {
    var yyresult : Class_ = null;
    parse_CLASS();
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Formals = parse_formals();
    val yyarg4 : Symbol = parse_superclass();
    parse_YYCHAR('{');
    val yyarg6 : Features = parse_feature_list();
    parse_YYCHAR('}');
    { yyresult = class_(yyarg2,yyarg4,
			      make_constructor(yyarg2,yyarg3) :: yyarg6,
			      Symbol(filename)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: .
   */
  private def yyrule8() : Symbol = {
    var yyresult : Symbol = null;
    { superclass_name = Symbol("Object"); 
                  yyresult = superclass_name;
                  add_supercall(superclass_name,Nil); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: EXTENDS . TYPEID actuals
   */
  private def yyrule9() : Symbol = {
    var yyresult : Symbol = null;
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Expressions = parse_actuals();
    { superclass_name = yyarg2; 
		  yyresult = superclass_name;
		  add_supercall(yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: EXTENDS . NATIVE
   */
  private def yyrule10() : Symbol = {
    var yyresult : Symbol = null;
    parse_NATIVE();
    { superclass_name = null; 
		  yyresult = null;
		  native_constructor(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: .
   */
  private def yyrule11() : Features = {
    var yyresult : Features = null;
    {  yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list . feature ';'
   */
  private def yyrule12(yyarg1 : Features) : Features = {
    var yyresult : Features = null;
    val yyarg2 : Feature = parse_feature();
    parse_YYCHAR(';');
    {  yyresult = yyarg1 + yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list error . ';'
   */
  private def yyrule13(yyarg1 : Features) : Features = {
    var yyresult : Features = null;
    parse_YYCHAR(';');
    {  yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list . NATIVE ';'
   */
  private def yyrule14(yyarg1 : Features) : Features = {
    var yyresult : Features = null;
    parse_NATIVE();
    parse_YYCHAR(';');
    { yyresult = yyarg1; native_constructor(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list . '{' block '}'
   */
  private def yyrule15(yyarg1 : Features) : Features = {
    var yyresult : Features = null;
    parse_YYCHAR('{');
    val yyarg3 : Expression = parse_block();
    parse_YYCHAR('}');
    { add_to_constructor(yyarg3);
		  yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: opt_override DEF OBJECTID formals ':' TYPEID '=' expr .
   */
  private def yyrule16(yyarg1 : Boolean, yyarg3 : Symbol, yyarg4 : Formals, yyarg6 : Symbol, yyarg8 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyresult = method(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: opt_override DEF OBJECTID formals ':' TYPEID . NATIVE
   */
  private def yyrule17(yyarg1 : Boolean, yyarg3 : Symbol, yyarg4 : Formals, yyarg6 : Symbol) : Feature = {
    var yyresult : Feature = null;
    parse_NATIVE();
    { yyresult = method(yyarg1,yyarg3,yyarg4,yyarg6,no_expr()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: VAR OBJECTID ':' TYPEID '=' expr .
   */
  private def yyrule18(yyarg2 : Symbol, yyarg4 : Symbol, yyarg6 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyresult = attr(yyarg2,yyarg4);
		  add_to_constructor(assign(yyarg2,yyarg6)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: VAR OBJECTID ':' . NATIVE
   */
  private def yyrule19(yyarg2 : Symbol) : Feature = {
    var yyresult : Feature = null;
    parse_NATIVE();
    { yyresult = attr(yyarg2,Symbol("native"));
		  /* if you have a native field, you cannot be inherited */
		  current_inherit_status = false; 
		  /* and your constructor is native */
		  native_constructor();
		}
    yyresult
  }

  /** Recursive descent parser after recognition point
   * opt_override: . OVERRIDE
   */
  private def yyrule20() : Boolean = {
    var yyresult : Boolean = false;
    parse_OVERRIDE();
    { yyresult = true; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * opt_override: .
   */
  private def yyrule21() : Boolean = {
    var yyresult : Boolean = false;
    { yyresult = false; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' . ')'
   */
  private def yyrule22() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' . formal_list ')'
   */
  private def yyrule23() : Formals = {
    var yyresult : Formals = null;
    val yyarg2 : Formals = parse_formal_list();
    parse_YYCHAR(')');
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' error . ')'
   */
  private def yyrule24() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = Nil;  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal_list: . formal
   */
  private def yyrule25() : Formals = {
    var yyresult : Formals = null;
    val yyarg1 : Formal = parse_formal();
    {  yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal_list: formal_list . ',' formal
   */
  private def yyrule26(yyarg1 : Formals) : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(',');
    val yyarg3 : Formal = parse_formal();
    { yyresult = yyarg1 + yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal: . OBJECTID ':' TYPEID
   */
  private def yyrule27() : Formal = {
    var yyresult : Formal = null;
    val yyarg1 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg3 : Symbol = parse_TYPEID();
    {  yyresult = formal(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID '=' expr .
   */
  private def yyrule28(yyarg1 : Symbol, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = assign(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: SUPER '.' OBJECTID actuals .
   */
  private def yyrule29(yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { val this_obj : Expression = variable(Symbol("this"));
	    yyresult = static_dispatch(this_obj,superclass_name,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '.' OBJECTID actuals .
   */
  private def yyrule30(yyarg1 : Expression, yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { yyresult = dispatch(yyarg1,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: IF '(' expr ')' expr ELSE expr .
   */
  private def yyrule31(yyarg3 : Expression, yyarg5 : Expression, yyarg7 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = cond(yyarg3,yyarg5,yyarg7); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: WHILE '(' expr ')' expr .
   */
  private def yyrule32(yyarg3 : Expression, yyarg5 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = loop(yyarg3,yyarg5); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . '{' block '}'
   */
  private def yyrule33() : Expression = {
    var yyresult : Expression = null;
    parse_YYCHAR('{');
    val yyarg2 : Expression = parse_block();
    parse_YYCHAR('}');
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr MATCH '{' case_list '}' .
   */
  private def yyrule34(yyarg1 : Expression, yyarg4 : Cases) : Expression = {
    var yyresult : Expression = null;
    { yyresult = typcase(yyarg1,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . NEW TYPEID actuals
   */
  private def yyrule35() : Expression = {
    var yyresult : Expression = null;
    parse_NEW();
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Expressions = parse_actuals();
    { yyresult = dispatch(new_(yyarg2),yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '+' expr .
   */
  private def yyrule36(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = add(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '-' expr .
   */
  private def yyrule37(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = sub(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '*' expr .
   */
  private def yyrule38(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = mul(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '/' expr .
   */
  private def yyrule39(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = div(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '-' expr .
   */
  private def yyrule40(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = neg(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '<' expr .
   */
  private def yyrule41(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = lt(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr EQ expr .
   */
  private def yyrule42(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = eql(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr EQEQ expr .
   */
  private def yyrule43(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = dispatch(yyarg1,Symbol("equals"),List(yyarg3)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr LE expr .
   */
  private def yyrule44(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = leq(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '!' expr .
   */
  private def yyrule45(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = comp(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . '(' expr ')'
   */
  private def yyrule46() : Expression = {
    var yyresult : Expression = null;
    parse_YYCHAR('(');
    val yyarg2 : Expression = parse_expr();
    parse_YYCHAR(')');
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . NULL
   */
  private def yyrule47() : Expression = {
    var yyresult : Expression = null;
    parse_NULL();
    { yyresult = unit(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . INT_LIT
   */
  private def yyrule48() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_INT_LIT();
    { yyresult = int_const(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . STR_LIT
   */
  private def yyrule49() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_STR_LIT();
    { yyresult = string_const(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . BOOL_LIT
   */
  private def yyrule50() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Boolean = parse_BOOL_LIT();
    { yyresult = bool_const(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID .
   */
  private def yyrule51(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    { yyresult = variable(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID . actuals
   */
  private def yyrule52(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    val yyarg2 : Expressions = parse_actuals();
    { 
	    yyresult = dispatch(variable(Symbol("this")),yyarg1,yyarg2); 
	  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * block: . stmt_list
   */
  private def yyrule53() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Expressions = parse_stmt_list();
    { yyresult = block(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr ';' .
   */
  private def yyrule54(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("deleted semicolon");
	    yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr .
   */
  private def yyrule55(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: error .
   */
  private def yyrule56() : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr ';' . stmt_list
   */
  private def yyrule57(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    val yyarg3 : Expressions = parse_stmt_list();
    { yyresult = yyarg1 :: yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: VAR OBJECTID ':' TYPEID '=' expr ';' stmt_list .
   */
  private def yyrule58(yyarg2 : Symbol, yyarg4 : Symbol, yyarg6 : Expression, yyarg8 : Expressions) : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = List(let(yyarg2,yyarg4,yyarg6,block(yyarg8))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: error . ';' stmt_list
   */
  private def yyrule59() : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(';');
    val yyarg3 : Expressions = parse_stmt_list();
    { yyresult = yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * actuals: '(' . ')'
   */
  private def yyrule60() : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(')');
    {  yyresult = Nil; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * actuals: '(' . exp_list ')'
   */
  private def yyrule61() : Expressions = {
    var yyresult : Expressions = null;
    val yyarg2 : Expressions = parse_exp_list();
    parse_YYCHAR(')');
    {  yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp_list: . expr
   */
  private def yyrule62() : Expressions = {
    var yyresult : Expressions = null;
    val yyarg1 : Expression = parse_expr();
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp_list: exp_list . ',' expr
   */
  private def yyrule63(yyarg1 : Expressions) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(',');
    val yyarg3 : Expression = parse_expr();
    { yyresult = yyarg1 + yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * case_list: . simple_cases
   */
  private def yyrule64() : Cases = {
    var yyresult : Cases = null;
    val yyarg1 : Cases = parse_simple_cases();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_cases: . simple_case
   */
  private def yyrule65() : Cases = {
    var yyresult : Cases = null;
    val yyarg1 : Case = parse_simple_case();
    { yyresult = List(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_cases: simple_cases . simple_case
   */
  private def yyrule66(yyarg1 : Cases) : Cases = {
    var yyresult : Cases = null;
    val yyarg2 : Case = parse_simple_case();
    { yyresult = yyarg1 + yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_case: . CASE OBJECTID ':' TYPEID ARROW expr
   */
  private def yyrule67() : Case = {
    var yyresult : Case = null;
    parse_CASE();
    val yyarg2 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg4 : Symbol = parse_TYPEID();
    parse_ARROW();
    val yyarg6 : Expression = parse_expr();
    { yyresult = branch(yyarg2,yyarg4,yyarg6); }
    yyresult
  }

  private def yystate16() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.WHILE() => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.SUPER() => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.NULL() => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.BOOL_LIT(yyarg2) => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.YYCHAR('!') => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.INT_LIT(yyarg2) => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.YYCHAR('(') => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.STR_LIT(yyarg2) => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.YYCHAR('{') => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.IF() => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.YYCHAR('-') => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case CoolTokens.YYCHAR(')') => yygoto = 1; yynt = YYNTactuals(yyrule60())
      case CoolTokens.NEW() => yygoto = 1; yynt = YYNTactuals(yyrule61())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate30(yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 4; yynt = YYNTexpr(yyrule29(yyarg3,yyarg4))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate29(yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate16();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate30(yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate28() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate29(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate27() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate28();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate38(yyarg1: Expression, yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 4; yynt = YYNTexpr(yyrule30(yyarg1,yyarg3,yyarg4))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate37(yyarg1: Expression, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate16();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate38(yyarg1,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate36(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate37(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate35(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg2);
      case _ => yygoto = 2; yynt = YYNTexpr(yyrule40(yyarg2))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate34() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate23(yyarg2);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate35(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate43(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule38(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate42(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate43(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate45(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule39(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate44(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate45(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate47(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule37(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate46(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate47(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate49(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule36(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate48(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate49(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate41(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.EQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.LE() => yynt = YYNTerror("(nonassociative)");
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule43(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate40(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate41(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate51(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.EQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.LE() => yynt = YYNTerror("(nonassociative)");
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule42(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate50(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate51(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate55(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 5; yynt = YYNTexpr(yyrule34(yyarg1,yyarg4))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate54(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynext; yygoto = yystate55(yyarg1,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate53(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yygoto = 0; yynt = YYNTcase_list(yyrule64())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTcase_list(yyarg4) => yygoto = yystate54(yyarg1,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate52(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('{') => yynext; yygoto = yystate53(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate61(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.EQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.LE() => yynt = YYNTerror("(nonassociative)");
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule41(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate60(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate61(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate63(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.EQ() => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynt = YYNTerror("(nonassociative)");
      case CoolTokens.LE() => yynt = YYNTerror("(nonassociative)");
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule44(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate62(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate63(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate59(yyarg3: Expression, yyarg5: Expression, yyarg7: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg7);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg7);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg7);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg7);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg7);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg7);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg7);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg7);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg7);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg7);
      case _ => yygoto = 7; yynt = YYNTexpr(yyrule31(yyarg3,yyarg5,yyarg7))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate58(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg7) => yynext; yygoto = yystate23(yyarg7);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg7) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg7) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg7) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg7) => yygoto = yystate59(yyarg3,yyarg5,yyarg7);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate57(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg5);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg5);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg5);
      case CoolTokens.ELSE() => yynext; yygoto = yystate58(yyarg3,yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate56(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate23(yyarg5);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate57(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate39(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg3);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate33() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate39(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate32() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate33();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate64(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg2);
      case _ => yygoto = 2; yynt = YYNTexpr(yyrule45(yyarg2))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate31() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate23(yyarg2);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg2) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate64(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate67(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg5);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg5);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case _ => yygoto = 5; yynt = YYNTexpr(yyrule32(yyarg3,yyarg5))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate66(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate23(yyarg5);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg5) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate67(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate65(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg3);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate26() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate65(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate25() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate26();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate68(yyarg1: Symbol, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg3);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg3);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case _ => yygoto = 3; yynt = YYNTexpr(yyrule28(yyarg1,yyarg3))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate24(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate23(yyarg3);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate68(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate23(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate24(yyarg1);
      case CoolTokens.YYCHAR('(') => yygoto = 1; yynt = YYNTexpr(yyrule52(yyarg1))
      case _ => yygoto = 1; yynt = YYNTexpr(yyrule51(yyarg1))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate69(yyarg2: Symbol, yyarg4: Symbol, yyarg6: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg6);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg6);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg6);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg6);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg6);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg6);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg6);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg6);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg6);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg6);
      case _ => yygoto = 6; yynt = YYNTfeature(yyrule18(yyarg2,yyarg4,yyarg6))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate22(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg6) => yynext; yygoto = yystate23(yyarg6);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg6) => yygoto = yystate69(yyarg2,yyarg4,yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate21(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate22(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate20(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.NATIVE() => yygoto = 3; yynt = YYNTfeature(yyrule19(yyarg2))
      case CoolTokens.TYPEID(yyarg4) => yynext; yygoto = yystate21(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate19(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(':') => yynext; yygoto = yystate20(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate18() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate19(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate9() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yygoto = 2; yynt = YYNTformals(yyrule24())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate8() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yygoto = 1; yynt = YYNTformals(yyrule23())
      case CoolTokens.YYCHAR(')') => yygoto = 1; yynt = YYNTformals(yyrule22())
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(')') => true
            case _ => false
          }})
          yygoto = yystate9();
      }
    }
    yygoto-1
  }

  private def yystate77(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol, yyarg8: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg8);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg8);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg8);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg8);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg8);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg8);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg8);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg8);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg8);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg8);
      case _ => yygoto = 8; yynt = YYNTfeature(yyrule16(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate76(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg8) => yynext; yygoto = yystate23(yyarg8);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg8) => yygoto = yystate77(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate75(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate76(yyarg1,yyarg3,yyarg4,yyarg6);
      case CoolTokens.NATIVE() => yygoto = 6; yynt = YYNTfeature(yyrule17(yyarg1,yyarg3,yyarg4,yyarg6))
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate74(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.TYPEID(yyarg6) => yynext; yygoto = yystate75(yyarg1,yyarg3,yyarg4,yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate73(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(':') => yynext; yygoto = yystate74(yyarg1,yyarg3,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate72(yyarg1: Boolean, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate8();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTformals(yyarg4) => yygoto = yystate73(yyarg1,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate71(yyarg1: Boolean) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate72(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate70(yyarg1: Boolean) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.DEF() => yynext; yygoto = yystate71(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate17() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.DEF() => yygoto = 0; yynt = YYNTopt_override(yyrule21())
      case CoolTokens.OVERRIDE() => yygoto = 0; yynt = YYNTopt_override(yyrule20())
      case CoolTokens.VAR() => yynext; yygoto = yystate18();
      case _ => yygoto = 0; yynt = YYNTopt_override(yyrule21())
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTopt_override(yyarg1) => yygoto = yystate70(yyarg1);
        case _:YYNTfeature => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate81() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yygoto = 0; yynt = YYNTformal(yyrule27())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTformal => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate1() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 1; yynt = YYNTprogram(yyrule2())
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate0() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yygoto = 0; yynt = YYNTprogram(yyrule1())
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYEOF() => true
            case _ => false
          }})
          yygoto = yystate1();
        case _:YYNTprogram => return 0;
      }
    }
    yygoto-1
  }

  private def yystate15() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate16();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTactuals => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate78() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.WHILE() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.SUPER() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.BOOL_LIT(yyarg1) => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.VAR() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.YYCHAR('!') => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.INT_LIT(yyarg1) => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.STR_LIT(yyarg1) => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.IF() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.YYCHAR('-') => yygoto = 0; yynt = YYNTblock(yyrule53())
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTblock(yyrule53())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTblock => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate83(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg1);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg1);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg1);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg1);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg1);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg1);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg1);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg1);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg1);
      case CoolTokens.YYCHAR(')') => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg1);
      case _ => yynt = YYNTexpr(yyarg1); yygoto = 2;
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTexpr => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate82() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yynext; yygoto = yystate23(yyarg1);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg1) => yygoto = yystate83(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate11() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.NATIVE() => yygoto = 1; yynt = YYNTsuperclass(yyrule10())
      case CoolTokens.TYPEID(yyarg2) => yygoto = 1; yynt = YYNTsuperclass(yyrule9())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate10() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EXTENDS() => yynext; yygoto = yystate11();
      case _ => yygoto = 0; yynt = YYNTsuperclass(yyrule8())
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsuperclass => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate7() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate8();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTformals => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate80(yyarg1: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yygoto = 1; yynt = YYNTformal_list(yyrule26(yyarg1))
      case CoolTokens.YYCHAR(')') => yynt = YYNTformal_list(yyarg1); yygoto = 2;
      case _ => yynt = YYNTformal_list(yyarg1); yygoto = 2;
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTformal_list => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate79() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yygoto = 0; yynt = YYNTformal_list(yyrule25())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTformal_list(yyarg1) => yygoto = yystate80(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate100() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yygoto = 0; yynt = YYNTsimple_case(yyrule67())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsimple_case => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate4(yyarg1: Classes) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yygoto = 2; yynt = YYNTclass_list(yyrule6(yyarg1))
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate3(yyarg1: Classes) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yygoto = 1; yynt = YYNTclass_list(yyrule5(yyarg1))
      case _ => yynt = YYNTclass_list(yyarg1); yygoto = 2;
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate4(yyarg1);
        case _:YYNTclass_list => return 0;
      }
    }
    yygoto-1
  }

  private def yystate5() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yygoto = 1; yynt = YYNTclass_list(yyrule4())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate2() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yygoto = 0; yynt = YYNTclass_list(yyrule3())
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTclass_list(yyarg1) => yygoto = yystate3(yyarg1);
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate5();
      }
    }
    yygoto-1
  }

  private def yystate14(yyarg1: Features) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yygoto = 2; yynt = YYNTfeature_list(yyrule13(yyarg1))
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate13(yyarg1: Features) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTfeature_list(yyarg1); yygoto = 2;
      case CoolTokens.NATIVE() => yygoto = 1; yynt = YYNTfeature_list(yyrule14(yyarg1))
      case CoolTokens.YYCHAR('{') => yygoto = 1; yynt = YYNTfeature_list(yyrule15(yyarg1))
      case CoolTokens.DEF() => yygoto = 1; yynt = YYNTfeature_list(yyrule12(yyarg1))
      case CoolTokens.OVERRIDE() => yygoto = 1; yynt = YYNTfeature_list(yyrule12(yyarg1))
      case CoolTokens.VAR() => yygoto = 1; yynt = YYNTfeature_list(yyrule12(yyarg1))
      case _ => yynt = YYNTfeature_list(yyarg1); yygoto = 2;
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate14(yyarg1);
        case _:YYNTfeature_list => return 0;
      }
    }
    yygoto-1
  }

  private def yystate12() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 0; yynt = YYNTfeature_list(yyrule11())
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTfeature_list(yyarg1) => yygoto = yystate13(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate99(yyarg1: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yygoto = 1; yynt = YYNTsimple_cases(yyrule66(yyarg1))
      case _ => yynt = YYNTsimple_cases(yyarg1); yygoto = 2;
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsimple_cases => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate98() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yygoto = 0; yynt = YYNTsimple_cases(yyrule65())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTsimple_cases(yyarg1) => yygoto = yystate99(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate97(yyarg1: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yygoto = 1; yynt = YYNTexp_list(yyrule63(yyarg1))
      case CoolTokens.YYCHAR(')') => yynt = YYNTexp_list(yyarg1); yygoto = 2;
      case _ => yynt = YYNTexp_list(yyarg1); yygoto = 2;
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTexp_list => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate96() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.WHILE() => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.SUPER() => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.BOOL_LIT(yyarg1) => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.YYCHAR('!') => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.INT_LIT(yyarg1) => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.STR_LIT(yyarg1) => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.IF() => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.YYCHAR('-') => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexp_list(yyrule62())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp_list(yyarg1) => yygoto = yystate97(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate6() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CLASS() => yygoto = 0; yynt = YYNTclass_decl(yyrule7())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTclass_decl => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate93(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yygoto = 2; yynt = YYNTstmt_list(yyrule54(yyarg1))
      case CoolTokens.OBJECTID(yyarg3) => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.WHILE() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.SUPER() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.NULL() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.BOOL_LIT(yyarg3) => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.VAR() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.YYCHAR('!') => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.INT_LIT(yyarg3) => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.YYCHAR('(') => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.STR_LIT(yyarg3) => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.YYCHAR('{') => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.IF() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.YYCHAR('-') => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case CoolTokens.NEW() => yygoto = 2; yynt = YYNTstmt_list(yyrule57(yyarg1))
      case _ => yygoto = 2; yynt = YYNTstmt_list(yyrule54(yyarg1))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate92(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg1);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg1);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg1);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg1);
      case CoolTokens.YYCHAR(';') => yynext; yygoto = yystate93(yyarg1);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg1);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg1);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg1);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg1);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg1);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg1);
      case _ => yygoto = 1; yynt = YYNTstmt_list(yyrule55(yyarg1))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate94() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yygoto = 1; yynt = YYNTstmt_list(yyrule59())
      case _ => yygoto = 1; yynt = YYNTstmt_list(yyrule56())
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate95(yyarg2: Symbol, yyarg4: Symbol, yyarg6: Expression, yyarg8: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yygoto = 8; yynt = YYNTstmt_list(yyrule58(yyarg2,yyarg4,yyarg6,yyarg8))
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate91(yyarg2: Symbol, yyarg4: Symbol, yyarg6: Expression) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.OBJECTID(yyarg8) => yynext; yygoto = yystate23(yyarg8);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.VAR() => yynext; yygoto = yystate85();
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.INT_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.STR_LIT(yyarg8) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg8) => yygoto = yystate92(yyarg8);
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case CoolTokens.YYCHAR('}') => true
            case _ => false
          }})
          yygoto = yystate94();
        case YYNTstmt_list(yyarg8) => yygoto = yystate95(yyarg2,yyarg4,yyarg6,yyarg8);
      }
    }
    yygoto-1
  }

  private def yystate90(yyarg2: Symbol, yyarg4: Symbol, yyarg6: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate36(yyarg6);
      case CoolTokens.EQEQ() => yynext; yygoto = yystate40(yyarg6);
      case CoolTokens.EQ() => yynext; yygoto = yystate50(yyarg6);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate42(yyarg6);
      case CoolTokens.YYCHAR(';') => yynext; yygoto = yystate91(yyarg2,yyarg4,yyarg6);
      case CoolTokens.MATCH() => yynext; yygoto = yystate52(yyarg6);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate44(yyarg6);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate46(yyarg6);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate48(yyarg6);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate60(yyarg6);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate89(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg6) => yynext; yygoto = yystate23(yyarg6);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.INT_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.STR_LIT(yyarg6) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg6) => yygoto = yystate90(yyarg2,yyarg4,yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate88(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate89(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate87(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.TYPEID(yyarg4) => yynext; yygoto = yystate88(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate86(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(':') => yynext; yygoto = yystate87(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate85() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate86(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate84() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.OBJECTID(yyarg1) => yynext; yygoto = yystate23(yyarg1);
      case CoolTokens.WHILE() => yynext; yygoto = yystate25();
      case CoolTokens.SUPER() => yynext; yygoto = yystate27();
      case CoolTokens.NULL() => yygoto = 0; yynt = YYNTexpr(yyrule47())
      case CoolTokens.BOOL_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule50())
      case CoolTokens.VAR() => yynext; yygoto = yystate85();
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate31();
      case CoolTokens.INT_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule48())
      case CoolTokens.YYCHAR('(') => yygoto = 0; yynt = YYNTexpr(yyrule46())
      case CoolTokens.STR_LIT(yyarg1) => yygoto = 0; yynt = YYNTexpr(yyrule49())
      case CoolTokens.YYCHAR('{') => yygoto = 0; yynt = YYNTexpr(yyrule33())
      case CoolTokens.IF() => yynext; yygoto = yystate32();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate34();
      case CoolTokens.NEW() => yygoto = 0; yynt = YYNTexpr(yyrule35())
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg1) => yygoto = yystate92(yyarg1);
        case YYNTerror(s) => 
          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case CoolTokens.YYCHAR('}') => true
            case _ => false
          }})
          yygoto = yystate94();
        case _:YYNTstmt_list => return 0;
      }
    }
    yygoto-1
  }

/* The following two lines are for the .SKEL file ## */
/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

type Classes = List[Class_]
type Features = List[Feature];
type Expressions = List[Expression];
type Formals = List[Formal];
type Cases = List[Case];

var scanner : CoolScanner = null;
var filename : String = "<unknown>";
var num_errors : Int = 0;
var result : Program = null;
var superclass_name : Symbol = null;
var current_inherit_status : Boolean = true;

def reset(fn : String, sc : CoolScanner) = {
  filename = fn;
  scanner = sc;
  num_errors = 0;
  result = null;
  superclass_name = null;
  current_inherit_status = true;

  yyreset(sc)
}

// Code to help build constructors:
var constr_is_native : Boolean = false;
var constr_body : List[Expression] = Nil;
def add_to_constructor(e : Expression) : Unit = { constr_body += e }
def add_supercall(supername : Symbol, actuals : Expressions) : Unit = {
  add_to_constructor(static_dispatch(variable(Symbol("this")),supername,
				     supername,actuals))
}
def native_constructor() = {
  constr_is_native = true
}
def make_constructor(name : Symbol, formals : List[Formal]) : Feature = {
  val result : Feature = 
  method(false,name,formals,name,
	 if (constr_is_native) no_expr() 
	 else block(constr_body + variable(Symbol("this"))));
  constr_is_native = false;
  constr_body = Nil;
  current_inherit_status = true;
  result
}

/* This function is called automatically when Bison detects a parse error. */
def yyerror(message : String) = {
  val curr_lineno : Int = scanner.getLineNumber;
  
  println(filename + ":" + curr_lineno + ": " + message);
  num_errors += 1;
  if (num_errors>50) { println("More than 50 errors"); System.exit(1); }
}


}
